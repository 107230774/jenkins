#! /bin/bash -

msg(){
    echo -e "`date +'%F %T'` `echo $1 | tr a-z A-Z`: $2"
    case $1 in
        error)      exit   1;;
        info)       return 0;;
        warning)    return 0;;
        space)      return 0;;
    esac
}

TimePoint(){
    case $1 in
        start)  time_start=`date +%s`;;
        stop)    time_stop=`date +%s`;;
        used)    time_used=`echo $time_stop - $time_start | bc`;;
    esac
}

SSH(){
    # SSH "CMD"
    test -z "$1" && msg error "require argument"

    ssh $SSH_OPTS -p $SSH_PORT $SSH_USER@$SSH_HOST "$1"
}

SCP(){
    # SCP local-file remote-path
    test -z "$2" && msg error "require argument"
    test -f "$1" || msg error "File $1 not found"
    
    scp -P $SSH_PORT -l $SCP_SPEED $1 $SSH_USER@$SSH_HOST:$2
}

GET(){
    # GET remote-path local-path
    test -z "$2" && msg error "require argument"

    local_dir="$(dirname $2)" 

    if [ "$local_dir" != "." ]   
    then
        test -d $local_dir || mkdir -p $local_dir
    fi

    scp -P $SSH_PORT -l $SCP_SPEED $SSH_USER@$SSH_HOST:$1 $2
}

check(){
    case $1 in
        args)
            if [ "$3" -lt "$2" ]
            then
                echo "Error: Missing arguments, required $2, detected $3"
                return 1
            fi
    
            return 0
            ;;
        file)
            test ! -f "$2" && msg error "File does not exist: $2"
            ;;
        user)  
            allowed_groups=$PERMISSION_DIR_GROUPS

            for aug in $ALWAYS_ALLOWED_GROUPS
            do
                if grep -q "^${BUILD_USER_ID}$" $allowed_groups/$aug
                then
                    msg info "Permission always granted for You"
                    return 0
                else
                    msg info "Skip"
                fi
            done

            for allow in $ALLOWED_USERS
            do
                allowed_file=$allowed_groups/$allow
                if [ -f $allowed_file ]
                then
                    if grep -q "^${BUILD_USER_ID}$" $allowed_file
                    then
                        msg info "Permission granted for group"
                        return 0
                    fi
                fi

                if [ "$BUILD_USER_ID" = "$allow" ]
                then    
                    msg info "Permission granted for user"
                    return 0
                fi
            done

            msg error "Dear $BUILD_USER, you don't have permission to build $JOB_NAME. Aborted."
            ;;
        return)
            rt_code="$?"

            test $rt_code != 0 && msg error "Detected failure in last step || return 0"
            ;;
    esac
}

fsize(){
    test -f "$1" && du -h "$1" | awk '{print $1}' || msg warning "File $1 not found"
}

nginx_status_check(){
    # ncc www.abc.com 172.16.0.1 80 /url -s("curl opts")

    CURL_OPTS="-s --retry $NGX_CC_RETRY --retry-delay $NGX_CC_RETRY_DELAY -m $NGX_CC_MAX_TIME"
    CURL_INFO="$NSC_HTTP_HOST:$NSC_HTTP_PORT:$NSC_HTTP_IP $NSC_HTTP_HOST:$NSC_HTTP_PORT$NSC_HTTP_URL"
    CURL_EXEC="curl --connect-timeout $NGX_CC_CT $CURL_OPTS --resolve $CURL_INFO"

    test "$NSC_CURL_ECHO" = "slient" && $CURL_EXEC > /dev/null || $CURL_EXEC

    NGX_CC_STAT=$?
}

NGX_STAT="ps aux | grep -v 'grep ' | grep -q 'nginx'"

nginx_start(){
    SSH "$NGX_STAT || /usr/bin/sudo $NGX_SBIN"
}

nginx_stop(){
    SSH "$NGX_STAT && /usr/bin/sudo killall nginx"
}

nginx_reload(){
    SSH "$NGX_STAT && /usr/bin/sudo $NGX_SBIN -s reload || $NGX_SBIN"
}

# Rollback Maven project
mp_rollback(){
          PROJECT="$APP_PRJ-$project-app"
          RBD2_ID=`echo $CHOICE_ONE | awk -F '/' '{print $6}'`
         RBD_NAME=`echo $CHOICE_ONE | awk -F '/' '{print $5}'`

       CLASS_NAME="${MOSAI_CLASS}.${APP_PRJ}"
      MODULES_DIR="$JENKINS_HOME/jobs/${RBD_NAME}/modules" 
       BUILDS_DIR="${MODULES_DIR}/${CLASS_NAME}\$${PROJECT}/builds/$RBD2_ID"
      ARCHIVE_DIR="${BUILDS_DIR}/archive/${CLASS_NAME}/${PROJECT}"
         SNAPSHOT=`grep "Building $PROJECT" $BUILDS_DIR/log | awk -F "$PROJECT " '{print $2}'`
    ROLLBACK_FILE=$ARCHIVE_DIR/$SNAPSHOT/${PROJECT}-${SNAPSHOT}.war
}

# Deploy Maven project
mp_deploy(){
     pj=${APP_PRJ}-${project}-app
    sta=`date +%s`
    # Offline service: Step 1
    NSC_HTTP_URL="/nginx_status"    

    msg info "Get Active connections, waiting: `nginx_status_check | tail -1`"  
    msg info "Preparing to offline $srv(Stop Nginx)"
     
    if [ $dp_count = 0 ]
    then
        nginx_stop
        while true
        do
            nginx_status_check
            if [ $NGX_CC_STAT != 0 ]
            then 
                msg info "Nginx is down(server $srv)"
                break 
            else
                sleep 3
                continue 
            fi
        done

        while true
        do
            stp=`date +%s`
            ust=`echo $stp - $sta | bc`
            
            if [ $ust -ge $WAIT_TIME ]
            then
                msg info "Time up! Ready to deploy for $srv(${ust}s)"
                break
            else
                msg info "Waiting for $srv(${ust}s) ..."
                sleep 5
                continue
            fi
        done
    fi
    # Uploading

    msg info "Uploading $pj to $srv"
    SCP $app $WEB_ROOT/resin/${pj}.war
}

remove (){
    test -f "$1" && rm -rf "$1" || msg warning "File not found: $1"
}

Upload2DockerBuildServer(){
    test "$API"         = "true" && TARGET="api"
    test "$CALLBACK"    = "true" && TARGET="$TARGET callback"
    test "$BACKOFFICE"  = "true" && TARGET="$TARGET backoffice"

    for target in $TARGET
    do
          pj=$APP_PRJ-$target-app
         app=$WORKSPACE/${pj}/target/${pj}.war
        name=${app_env}_${target}.war
        
        msg info "Uploading $(basename $app)(size: `fsize $app`) save as $name"

        TimePoint start
        SCP $app $DOCKER_BUILD_PATH/$name
        TimePoint stop
        test $? = 0 && msg info "Succeeded, ${time_used} seconds" || msg warning "Failed"
    done
}

DockerBuildImages(){
    dockerfile="Dockerfile"

    test -f $DOCKER_BUILD_TO_RUN_LIST && > $DOCKER_BUILD_TO_RUN_LIST

    for f in ${app_env}_${APP_PRJ}-*.war
    do
        check file $f
        
              name="${app_env}-${APP_OBJ}.${f##*.}"
        image_name="${name%.*}"
        # DOCKER_TAG, default is 'latest'
        docker_tag="$DOCKER_REPOSITORY/$image_name:$DOCKER_TAG"
        
        cp -rf files/$dockerfile . 
        
        echo "ADD  $name $RESIN_WEB" >> $dockerfile
        
        sudo docker build -t $docker_tag .
        sudo docker push     $docker_tag
        
        echo "$docker_tag" >> $DOCKER_BUILD_TO_RUN_LIST
        remove $f
    done
}

DockerContainerControlllor(){
    # Stop & remove old container    
    dc_oid=`SSH "sudo docker ps -a | grep $container_name" | awk '{print $1}' | head -1`  
        
    if [ -z "$dc_oid" ]
    then
        msg warning "Container id not found"
    else
        dc_oip=`SSH "sudo docker inspect -f '{{.NetworkSettings.IPAddress}}' $dc_oid"`

        msg info "Stop & remove old container id=$dc_oid, ip=$dc_oip"
        SSH "sudo docker stop $dc_oid"
        SSH "sudo docker rm $dc_oid"
    fi

    img_name="`echo $docker_tag | awk -F ':' '{print $1}'`"
     img_tag="`echo $docker_tag | awk -F ':' '{print $2}'`"

    msg info "Pull new images"
    SSH "sudo docker pull $docker_tag"
    
    msg info "Start container $container_name use image $docker_tag"

    SSH "sudo docker run -d --name $container_name $link_opts $docker_tag /run.sh"

    dc_nid=`SSH "sudo docker ps -a | grep $container_name" | awk '{print $1}'`

    if [ ! -z "$dc_nid" ]
    then
        dc_nip=`SSH "sudo docker inspect -f '{{.NetworkSettings.IPAddress}}' $dc_nid"`
        
        msg info "New container id=$dc_nid, ip=$dc_nip"
    else
        msg error "Failed to start container $container_name use image $docker_tag"
    fi 
    
    if [ ! -z "$dc_oip" ] && [ ! -z "$dc_nip" ] && [ "$dc_oip" != "$dc_nip" ]
    then
        msg warning "Container IP has been changed to $dc_nip from old IP $dc_oip"
        
        msg info "Preparing to update Nginx settings"
        SSH "sed -i \"s/$dc_oip/$dc_nip/g\" $ngx_vhosts_conf"
        
        msg warning "Reloading Nginx"
        SSH "sudo $NGX_DIR/sbin/nginx -s reload"
    else
        msg info "IP still using $dc_nip by $container_name"
    fi
}


UnlockKeychain(){
    if [ -f $OSX_KEYCHAIN_AUTH_FILE ]
    then
        . $OSX_KEYCHAIN_AUTH_FILE
    else
        msg error "Failed to unlock keychain: $OSX_KEYCHAIN_AUTH_FILE not found"
    fi
    
    security unlock-keychain -p "$OSX_JENKINS_PASSWORD" $OSX_KEYCHAIN_FILE
    security set-keychain-settings -t 3600 -l $OSX_KEYCHAIN_FILE
}

XCodeBuild(){
    test -d $(dirname $ios_export_path) || mkdir -p $(dirname $ios_export_path)
    xcodebuild  -workspace $ios_project_path\
                -scheme $ios_scheme\
                -configuration $ios_configuration\
                -sdk $ios_sdk\
                CODE_SIGN_IDENTITY="$iOS_DEV_CSI"\
                PROVISIONING_PROFILE="$iOS_PROVISIONING_PROFILE"\
                -archivePath ${ios_archive_path}\
                clean archive

    xcodebuild  -exportArchive\
                -archivePath ${ios_archive_path}\
                PROVISIONING_PROFILE="${iOS_PROVISIONING_PROFILE}"\
                CODE_SIGN_IDENTITY="${iOS_DEV_CSI}"\
                -exportPath $ios_export_path 

    
    echo -e "Download URLs:"
    echo -e "\t1. $JKS_DL_URL/$iOS_IPA_SAVE_URL"
    echo -e "\t2. http://$JKS_AGENT_MACOSX_01/$iOS_IPA_SAVE_URL"
}

SmartCheck(){
    case $1 in
        Permission)
            case $APP_ENV in
                DEV)    ALLOWED_USERS="`echo ${APP_ENV}-${APP_OBJ} | tr A-Z a-z`" ;;
                QA)     ALLOWED_USERS="qa"  ;;
                PD)     ALLOWED_USERS=""    ;;
                *)      ALLOWED_USERS=""    ;;
            esac

            check user
            ;;
    esac
}
