#! /bin/bash

# Settings
test -z "$DOCKER_TAG" && DOCKER_TAG=latest
      DOCKER_REGISTRY=registry.${DOMAIN}
    DOCKER_LOGIN_USER=registry
DOCKER_LOGIN_PASSWORD=""
    DOCKER_FILES_ROOT=""
          DOCKER_FILE="Dockerfile"
   DOCKER_TEMPLATE_DN="${DOCKER_FILE}s"
     DOCKER_FILES_DIR="$DOCKER_FILES_ROOT/$app_prj/$app_env/$DOCKER_TEMPLATE_DIR"
 DOCKER_IMAGE_NAME_LC="`echo $APP_SUB | tr A-Z a-z`"
    DOCKER_IMAGE_NAME="$DOCKER_REGISTRY/project/$app_prj/$APP_SUB"
    DOCKER_BUILD_OPTS=""

     TEMPLATE_SPECIFY="$(dirname $DOCKER_FILES_DIR)/$APP_SUB/$DOCKER_TEMPLATE_DIR"
      TEMPLATE_COMMON="$DOCKER_FILES_DIR"

DockerLogin(){
    msg i "Login to $DOCKER_REGISTRY"
    $sudo docker login -u $DOCKER_LOGIN_USER -p $DOCKER_LOGIN_PASSWORD $DOCKER_REGISTRY
}

DockerImagesList(){
    test "$1" = "all" && opts="| grep -v '<none>'" || opts=
    $sudo docker images $opts
}

DockerImagesClean(){
    none_images_id="`$sudo docker images | awk '$2 == "<none>"' | awk '{print $3}'`"

    test ! -z "$none_images_id" && $sudo docker rmi $none_images_id || msg i "All images looks good"
}

DockerImageBuild(){
    if [ -d "$DOCKER_TEMPLATE_DIR" ]
    then
        test -f "$dfd/$DOCKER_FILE"       || msg e "File not found: $DOCKER_FILE"
        test -z "$DOCKER_IMAGE_NAME"    && msg e "Require docker image name"

        msg i "Build image $DOCKER_IMAGE_NAME:$DOCKER_TAG"

        test -z "$DOCKER_BUILD_OPTS" || msg i "Docker build options: $DOCKER_BUILD_OPTS"
        $sudo docker build $DOCKER_BUILD_OPTS -t $DOCKER_IMAGE_NAME:$DOCKER_TAG $DOCKER_TEMPLATE_DN
        test $? = 0 && msg i "Successfully completed build image" || msg e "Failed to build image"
    else
        msg e "$DOCKER_FILE dir not found: $DOCKER_TEMPLATE_DN"
    fi
}

DockerImagePush(){
    DockerLogin
    msg i "Push $DOCKER_IMAGE_NAME:$DOCKER_TAG"
    $sudo docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
}

DockerImage(){
    case "$1" in
        build|Build)    DockerImageBuild        ;;
        clean|Clean)    DockerImagesClean       ;;
         list|List)     DockerImagesList        ;;
         push|Push)     DockerImagePush         ;;
    esac
}

DockerfileInit(){
    msg i "Remove  $DOCKER_TEMPLATE_DN"
    remove $DOCKER_TEMPLATE_DN

    msg i "Copy $DOCKER_TEMPLATE_DN"

    if [ -d $TEMPLATE_SPECIFY ] || [ -L $TEMPLATE_SPECIFY ]
    then
        cp -rfH $TEMPLATE_SPECIFY $DOCKER_TEMPLATE_DN
        msg i "Use specify templates"
    else
        cp -rfH $TEMPLATE_COMMON  $DOCKER_TEMPLATE_DN
        msg i "Use common templates"
    fi

    test -z "$APP_NAME" && APP_NAME="$APP_SUB"
    test -z "$PKG_NAME" || APP_NAME="$PKG_NAME"

    f="$DOCKER_TEMPLATE_DN/$DOCKER_FILE"
    if [ ! -z "$APP_FILE" ]
    then
        msg i "Preparing project files"
        check exist $APP_FILE
        #cp -rf $APP_FILE $d/$APP_NAME

        RSC_OPTS="-a --exclude-from=$RSYNC_EXCLUDE_LIST"

        rsync $RSC_OPTS $APP_FILE $d
    else
        msg e "Missing target files"
    fi

    msg i "Preparing to build docker image: $DOCKER_IMAGE_NAME:$DOCKER_TAG"

    test -z "$SCM_REVISION"      && SCM_REVISION="$SVN_REVISION"
    test -z "$USE_SHARING_FILES" || return 0

    DOCKER_LABEL="job.name=$JOB_NAME build.number=$BUILD_NUMBER build.user=\"$BUILD_USER\" scm.revision=$SCM_REVISION"

    echo "LABEL $DOCKER_LABEL"                      >> $f
    echo "COPY $APP_NAME $WEB_ROOT_DIR/$APP_NAME"   >> $f
    echo "ENTRYPOINT [\"/run.sh\"]"                 >> $f
}

DockerfileBackup(){
    msg i "Backup $DOCKER_TEMPLATE_DN"
    test -d "$USING_DOCKERFILES" || mkdir -p $USING_DOCKERFILES
    rsync -au $DOCKER_TEMPLATE_DN $USING_DOCKERFILES
}
