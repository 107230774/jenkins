#! /bin/bash

# Settings
      DOCKER_REGISTRY="registry.${DOMAIN}"
    DOCKER_LOGIN_USER="registry"
DOCKER_LOGIN_PASSWORD=
    DOCKER_BUILD_HOST=

    DOCKERFILE_IGNORE="$CONFIG_DIR/.dockerignore"
     DOCKER_FILES_DIR="/data/dockerfiles/$app_prj/$app_env/$APP_SUB"
 DOCKER_IMAGE_NAME_LC="`echo $APP_SUB | tr A-Z a-z`"
    DOCKER_IMAGE_NAME="$DOCKER_REGISTRY/project/$app_prj/$APP_SUB"
    DOCKER_BUILD_OPTS=""

      TEMPLATE_COMMON="/data/dockerfiles/$app_prj/$app_env/Dockerfiles"
     TEMPLATE_SPECIFY=$(dirname $TEMPLATE_COMMON)/$APP_SUB/Dockerfiles

DockerLogin(){
    load password

    DOCKER_LOGIN_PASSWORD="`Password docker`"

    msg i "Login to $DOCKER_REGISTRY"
    sudo docker login -u $DOCKER_LOGIN_USER -p $DOCKER_LOGIN_PASSWORD $DOCKER_REGISTRY
}

DockerImagesList(){
    test "$1" = "all" && opts="| grep -v '<none>'" || opts=
    sudo docker images $opts
}

DockerImagesClean(){
    none_images_id="`sudo docker images | awk '$2 == "<none>"' | awk '{print $3}'`"

    test ! -z "$none_images_id" && sudo docker rmi $none_images_id || msg i "All images looks good"
}

DockerImageSize(){
    image_name="`echo $DOCKER_IMAGE_NAME  | awk -F ':' '{print $1}'`"
     image_tag="`echo $DOCKER_IMAGE_NAME  | awk -F ':' '{print $2}'`"
    DockerImagesList | grep "$image_name" | grep "$image_tag" | awk '{print $7,$8}' | head -1
}

DockerImageBuild(){
    test -z "$DOCKER_TAG"  && DOCKER_TAG="latest"

    echo "$DOCKER_TAG" | grep -q "/"

    test $? = 0 && DOCKER_TAG="`echo $DOCKER_TAG | tr '/' '-'`"

    if [ -f "Dockerfile" ]
    then
        test -z "$DOCKER_IMAGE_NAME"    && msg e "Require docker image name"

        msg i "Build image $DOCKER_IMAGE_NAME:$DOCKER_TAG"
        msg i "Docker build options: $DOCKER_BUILD_OPTS"
        sudo docker build $DOCKER_BUILD_OPTS -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .
        test $? = 0 && msg i "Successfully completed build image" || msg e "Failed to build image"

        msg i "Image $DOCKER_IMAGE_NAME size: `DockerImageSize`"

    else
        msg e "File not found: Dockerfile"
    fi
}

DockerImagePush(){
    DockerLogin
    msg i "Push $DOCKER_IMAGE_NAME:$DOCKER_TAG"
    sudo docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
}

DockerImage(){
    case "$1" in
        build|Build)    DockerImageBuild        ;;
        clean|Clean)    DockerImagesClean       ;;
         list|List)     DockerImagesList        ;;
         push|Push)     DockerImagePush         ;;
         size|Size)     DockerImageSize         ;;
    esac
}


DockerfileInit(){
    msg i "Copy Dockerfiles"

    if [ -d $TEMPLATE_SPECIFY ] || [ -L $TEMPLATE_SPECIFY ]
    then
        cp -rfH $TEMPLATE_SPECIFY/* .
        msg i "Use specify templates"
    else
        cp -rfH $TEMPLATE_COMMON/*  .
        msg i "Use common templates"
    fi

    # Copy Docker ignore file
    cp $DOCKERFILE_IGNORE .

    test -z "$APP_FILE" && APP_FILE="."
    test -z "$APP_NAME" && APP_NAME="$APP_SUB"
    test -z "$PKG_NAME" || APP_NAME="$PKG_NAME"

    f="Dockerfile"

    msg i "Preparing $f"

    test -z "$SCM_REVISION"      && SCM_REVISION="$SVN_REVISION"
    test -z "$USE_SHARING_FILES" || return 0

    DOCKER_LABEL="job.name=$JOB_NAME build.number=$BUILD_NUMBER"
    DOCKER_LABEL="$DOCKER_LABEL build.user=\"$BUILD_USER\" scm.revision=$SCM_REVISION"

    echo "LABEL $DOCKER_LABEL"                      >> $f
    echo "COPY $APP_FILE $WEB_ROOT_DIR/$APP_NAME"   >> $f
    echo "ENTRYPOINT [\"/run.sh\"]"                 >> $f
}

DockerfileBackup(){
    msg i "Backup Dockerfiles"
    test -d "$USING_DOCKERFILES" || mkdir -p $USING_DOCKERFILES
    rsync -au $f_lists $USING_DOCKERFILES
}
