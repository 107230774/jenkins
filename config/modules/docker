#! /bin/bash

# Settings
DOCKER_TAG=latest
DOCKER_REGISTRY=registry.${DOMAIN}
DOCKER_LOGIN_USER=registry
DOCKER_LOGIN_PASSWORD=
DOCKER_BUILD_HOST=

DOCKER_FILES_DIR=/data/dockerfiles/$app_prj/$app_env
DOCKER_IMAGE_NAME="$DOCKER_REGISTRY/project/$app_prj/$APP_SUB"
DOCKER_BUILD_OPTS="--no-cache"

 TEMPLATE_COMMON="$DOCKER_FILES_DIR/Dockerfiles"
TEMPLATE_SPECIFY=$(dirname $TEMPLATE_COMMON)/$APP_SUB/Dockerfiles

DockerLogin(){
    DOCKER_LOGIN_PASSWORD="`Password docker`"

    msg i "Login to $DOCKER_REGISTRY"
    sudo docker login -u $DOCKER_LOGIN_USER -p $DOCKER_LOGIN_PASSWORD $DOCKER_REGISTRY
}

DockerImagesList(){
    test "$1" = "all" && opts="| grep -v '<none>'" || opts=
    sudo docker images $opts
}

DockerImagesClean(){
    none_images_id="`sudo docker images | awk '$2 == "<none>"' | awk '{print $3}'`"

    test ! -z "$none_images_id" && sudo docker rmi $none_images_id || msg i "All images looks good"
}

DockerImageSize(){
    image_name="`echo $DOCKER_IMAGE_NAME  | awk -F ':' '{print $1}'`"
     image_tag="`echo $DOCKER_IMAGE_NAME  | awk -F ':' '{print $2}'`"
    DockerImagesList | grep "$image_name" | grep "$image_tag" | awk '{print $7,$8}' | head -1
}

DockerImageBuild(){
    test -z "$DOCKER_TAG"           && DOCKER_TAG="latest"    
    test -f "./Dockerfile"          || msg e "File not found: Dockerfile"   
    test -z "$DOCKER_IMAGE_NAME"    && msg e "Require docker image name"

    msg i "Build image $DOCKER_IMAGE_NAME:$DOCKER_TAG with docker options $DOCKER_BUILD_OPTS"
    sudo docker build $DOCKER_BUILD_OPTS -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .
    test $? = 0 && msg i "Successfully completed build image" || msg e "Failed to build image"

    msg i "Image $DOCKER_IMAGE_NAME size: `DockerImageSize`"
}

DockerImagePush(){
    DockerLogin
    msg i "Push $DOCKER_IMAGE_NAME:$DOCKER_TAG"
    sudo docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
}

DockerImage(){
    case "$1" in
        build|Build)    DockerImageBuild        ;;
        clean|Clean)    DockerImagesClean       ;;
         list|List)     DockerImagesList        ;;
         push|Push)     DockerImagePush         ;;
         size|Size)     DockerImageSize         ;;
    esac
}

DockerfileCopy(){
    remove Dockerfiles
    
    msg i "Copy Dockerfiles"
        
    if [ -d $TEMPLATE_SPECIAL ]
    then
        cp -rf $TEMPLATE_SPECIFY . 
        msg i "Use specify Dockerfiles"
    else
        cp -rf $TEMPLATE_COMMON .
        msg i "Use common Dockerfiles"
    fi
}
